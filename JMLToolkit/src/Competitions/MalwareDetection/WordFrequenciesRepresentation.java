package Competitions.MalwareDetection;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;


import com.google.common.collect.ObjectArrays;

public class WordFrequenciesRepresentation 
{
	// read a file as a list of bytes
	String ReadFile(File f)
	{
		List<String> fileBytes = new ArrayList<String>(); 
	
		try
		{
			// first count the number of instances and the number of classes
			BufferedReader br = new BufferedReader(new FileReader(f) );
			
			String delimiters = "\t ,;";
            String line;
            
            while( (line=br.readLine()) != null)
			{
				StringTokenizer tokenizer = new StringTokenizer(line, delimiters);
			
				// throw away the first token, which is the memory address
				tokenizer.nextToken();
				// add the tokens to the bytes string 
				while( tokenizer.hasMoreTokens() ) 
					fileBytes.add( tokenizer.nextToken() ); 
			}

            br.close(); 
		}
		catch(Exception exc)
		{
			exc.printStackTrace();
		}
		
		char [] bytes = new char[fileBytes.size()*2];
		
		for( int byteIdx=0; byteIdx < fileBytes.size(); byteIdx++ )
		{
			bytes[2*byteIdx] = fileBytes.get(byteIdx).charAt(0);
			bytes[2*byteIdx+1] = fileBytes.get(byteIdx).charAt(1);
		}
		
		return new String(bytes);
	}
	
	// compute a dictionary of words
	List<Set<String>> ComputeDictionary(File trainFolder, File testFolder, int [] wordLengths)
	{
		List<Set<String>> dictionaries = new  ArrayList<Set<String>>();
		// initialize dictionaries
		for(int wordLengthIdx =0; wordLengthIdx < wordLengths.length; wordLengthIdx++)
			dictionaries.add( new HashSet<String>() );
		
		// iterate over the set of bytes
		File [] trainFiles = trainFolder.listFiles();
		File [] testFiles = testFolder.listFiles();
		// concatenate the train and test files
		File [] allFiles = ObjectArrays.concat(trainFiles, testFiles, File.class);  
		
		for (File f : allFiles )
		{
			// process the file if it is not a directory
	        if (!f.isDirectory()) 
	        {
	        	// read the bytes of the file
	        	String fBytes = ReadFile(f);
	        	
	        	System.out.println("ComputeDictionary: File=" + f.getAbsolutePath() + ", numBytes=" + fBytes.length() );
	        	
	        	// exctract words of different lengths
	        	for(int wordLengthIdx =0; wordLengthIdx < wordLengths.length; wordLengthIdx++)
				{
	        		// iterate through all the words of the file's bytes string, iterate by to chars for one hexa byte
	        		for( int byteIdx = 0; byteIdx < fBytes.length() - wordLengths[wordLengthIdx]; byteIdx+=2 )
	        			dictionaries.get(wordLengthIdx).add( fBytes.substring(byteIdx, byteIdx+wordLengths[wordLengthIdx]) );
				} 
	        } 
		} 
		return dictionaries;
	}
	
	// compute the word frequency representation 
	public void ComputeWordFrequencies(
			File trainFolder, 
			File testFolder, 
			List<Map<String,Integer>> dictionaries, 
			int [] wordLengths,
			String frequenciesFolder) 
	{
		// iterate over the set of bytes
		File [] trainFiles = trainFolder.listFiles();
		File [] testFiles = testFolder.listFiles();
		// concatenate the train and test files
		File [] allFiles = ObjectArrays.concat(trainFiles, testFiles, File.class);  
		
		// compute the total number of words
		int [] numWordsPerDictionary = new int[wordLengths.length]; 
		
		int totalNumberOfWords = 0; 
		for(int wordLengthIdx =0; wordLengthIdx < wordLengths.length; wordLengthIdx++)
		{
			numWordsPerDictionary[wordLengthIdx] = dictionaries.get(wordLengthIdx).size();
			totalNumberOfWords += numWordsPerDictionary[wordLengthIdx];
		}
		
		int numFiles = allFiles.length; 
		
		// initialize the frequencies matrix
		int [][] frequencies = new int[numFiles][totalNumberOfWords];
		// set frequencies to zero
		for(int n=0; n<numFiles; n++)
			for(int m=0; m<totalNumberOfWords; m++)
				frequencies[n][m] = 0;
		
		// read all files and compute 
		int fIdx = 0;
		
		for (File f : allFiles )
		{
			
			// process the file if it is not a directory
	        if (!f.isDirectory()) 
	        {
	        	// read the bytes of the file
	        	String fBytes = ReadFile(f); 
	        	
	        	System.out.println("ComputeWordFrequencies: File=" + f.getAbsolutePath() + ", numBytes=" + fBytes.length() );
					
	        	int globalWordIdx = 0;
	        	
	        	// exctract words of different lengths
	        	for(int wordLengthIdx =0; wordLengthIdx < wordLengths.length; wordLengthIdx++)
				{
	        		// iterate through all the words of the file's bytes string, iterate by to chars for one hexa byte
	        		for( int byteIdx = 0; byteIdx < fBytes.length() - wordLengths[wordLengthIdx]; byteIdx+=2 )
	        		{
	        			// get the word frequency in the dictionary
	        			int wordIdx = dictionaries.get(wordLengthIdx).get(fBytes.substring(byteIdx, byteIdx+wordLengths[wordLengthIdx]));
	        			
       					// increment the frequency
	        			frequencies[fIdx][globalWordIdx + wordIdx]++; 
	        		}
	        		
	        		globalWordIdx += numWordsPerDictionary[wordLengthIdx]; 
				} 
	        } 
	        
	        // increment the file index counter 
	        fIdx++;
		} 
		
		// save the frequencies matrix
		try
		{
			PrintStream ps = new PrintStream( frequenciesFolder + File.separator + "trainFrequencies.csv");
			
			for(int n=0; n< trainFiles.length; n++)
			{
				ps.print( trainFiles[n].getName().replaceFirst("[.][^.]+$", "") + "," );  
				
				for(int m=0; m<totalNumberOfWords; m++)
				{
					ps.print( frequencies[n][m]);
					
					if( m < totalNumberOfWords-1 )
						ps.print(",");
				}
				
				ps.println();
			}
			ps.close();
			
			// print the test frequncies
			ps = new PrintStream( frequenciesFolder + File.separator + "testFrequencies.csv");
			
			for(int n=0; n < testFiles.length; n++) 
			{
				ps.print( testFiles[n].getName().replaceFirst("[.][^.]+$", "") + "," ); 
				
				for(int m=0; m<totalNumberOfWords; m++)
				{
					ps.print(frequencies[ n + trainFiles.length ][m]);
					
					if( m < totalNumberOfWords-1 )
						ps.print(","); 
				}
				
				ps.println();
			}
			
			ps.close();
	       	
		}
		catch(Exception e)
		{ 
			e.printStackTrace();
		} 
	}
		
}
